scalar DateTime

interface BaseModel {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime
    deletedAt: DateTime
}

type Avocado implements BaseModel {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime
    deletedAt: DateTime

    name: String!
    sku: String!
    price: Float!
    image: String!
    attributes: AvocadoAttributes!
}

type AvocadoAttributes {
    description: String!
    shape: String!
    hardiness: String!
    taste: String!
}

input AvocadoInput {
    name: String!
    price: Float!
    image: String!
    description: String!
    shape: String!
    hardiness: String!
    taste: String!
}

type Query {
    getAvos(skip: Int, take: Int, where: AvoWhereInput): [Avocado]!
    getAvo(id: Int!): Avocado
}

type Mutation {
    createAvo(data: AvocadoInput!): Avocado!
}

input AvoWhereInput {
    name: StringFilterInput,
    price: Float
}

input StringFilterInput {
    equals: String
    in: [String]
    notIn: [String]
    lt: String
    lte: String
    gt: String
    gte: String
    contains: String
    startsWith: String
    endsWith: String
    not: String
}